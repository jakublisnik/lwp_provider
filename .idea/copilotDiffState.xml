<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/cz/cid/lwp/LwpIdAuthenticator.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/cz/cid/lwp/LwpIdAuthenticator.java" />
              <option name="originalContent" value="package cz.cid.lwp;&#10;&#10;import com.azure.cosmos.CosmosClient;&#10;import com.azure.cosmos.CosmosClientBuilder;&#10;import com.azure.cosmos.CosmosContainer;&#10;import com.azure.cosmos.CosmosDatabase;&#10;import com.azure.cosmos.models.CosmosQueryRequestOptions;&#10;import org.keycloak.authentication.AuthenticationFlowContext;&#10;import org.keycloak.authentication.Authenticator;&#10;import org.keycloak.models.UserModel;&#10;import org.slf4j.Logger;&#10;import org.slf4j.LoggerFactory;&#10;&#10;import java.util.Collections;&#10;import java.util.Map;&#10;&#10;public class LwpIdAuthenticator implements Authenticator {&#10;&#10;    private static final Logger logger = LoggerFactory.getLogger(LwpIdAuthenticator.class);&#10;&#10;    private static CosmosClient cosmosClient = null;&#10;    private static CosmosContainer cosmosContainer = null;&#10;&#10;    private static void initCosmos() {&#10;        logger.debug(&quot;initCosmos: checking COSMOS configuration&quot;);&#10;        if (cosmosClient != null &amp;&amp; cosmosContainer != null) return;&#10;&#10;        String endpoint = &quot;https://mobidriverdb.documents.azure.com:443/&quot;;&#10;        String key = &quot;6VWHXGXL0HkNU3M9mxTpDUbjvRB9WfeCzDRYvP9YCL8Mz5GEo37iDsPvotT26SMyGZ5CtknbvEMurju0n7SnyA==&quot;;&#10;        String dbName = &quot;MobiDriver&quot;;&#10;        String containerName = &quot;UserPKP&quot;;&#10;&#10;&#10;        try {&#10;            cosmosClient = new CosmosClientBuilder()&#10;                    .endpoint(endpoint)&#10;                    .key(key)&#10;                    .buildClient();&#10;&#10;            CosmosDatabase database = cosmosClient.getDatabase(dbName);&#10;            cosmosContainer = database.getContainer(containerName);&#10;            logger.info(&quot;initCosmos: initialized Cosmos container {} in database {}&quot;, containerName, dbName);&#10;        } catch (Exception e) {&#10;            logger.warn(&quot;initCosmos: failed to initialize Cosmos client/container&quot;, e);&#10;            // if something goes wrong, keep cosmosContainer null and fall back&#10;            cosmosContainer = null;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void authenticate(AuthenticationFlowContext context) {&#10;        UserModel user = context.getUser();&#10;&#10;        if (user == null) {&#10;            logger.warn(&quot;authenticate: user is null in context&quot;);&#10;            context.failure(org.keycloak.authentication.AuthenticationFlowError.UNKNOWN_USER);&#10;            return;&#10;        }&#10;&#10;        String username = user.getUsername();&#10;        logger.info(&quot;authenticate: start for username={}&quot;, username);&#10;&#10;        // Try to locate EmployeeId from user attributes or auth session&#10;        String employeeId = findEmployeeId(context, user);&#10;        // Try to locate CompanyId (string) from user attributes or auth session&#10;        logger.info(&quot;EMPLOYEE ID : {}&quot;, employeeId);&#10;&#10;&#10;        String lwpId = null;&#10;&#10;        if (employeeId == null) {&#10;            logger.warn(&quot;authenticate: no employeeId found for user='{}' - skipping Cosmos lookup&quot;, username);&#10;        } else {&#10;            initCosmos();&#10;            if (cosmosContainer == null) {&#10;                logger.warn(&quot;authenticate: cosmosContainer is null after init - will use fallback for user='{}'&quot;, username);&#10;            } else {&#10;                try {&#10;                    // Prepare EmployeeId for SQL: if non-numeric, quote and escape&#10;                    String queryEmployee = employeeId;&#10;                    if (!employeeId.matches(&quot;\\d+&quot;)) {&#10;                        String escapedEmp = employeeId.replace(&quot;'&quot;, &quot;''&quot;);&#10;                        queryEmployee = &quot;'&quot; + escapedEmp + &quot;'&quot;;&#10;                    }&#10;                    // Query only by EmployeeId (company filter removed)&#10;                    String query = String.format(&quot;SELECT * FROM c WHERE c.Item.EmployeeId = %s&quot;, queryEmployee);&#10;                    logger.info(&quot;authenticate: running Cosmos query: {}&quot;, query);&#10;                    Iterable&lt;?&gt; itemsObj = cosmosContainer.queryItems(query, new CosmosQueryRequestOptions(), Object.class);&#10;&#10;                    boolean anyDoc = false;&#10;                    if (itemsObj != null) {&#10;                        for (Object it : itemsObj) {&#10;                            anyDoc = true;&#10;                            if (it instanceof Map) {&#10;                                @SuppressWarnings(&quot;unchecked&quot;)&#10;                                Map&lt;String, Object&gt; doc = (Map&lt;String, Object&gt;) it;&#10;                                Object docId = doc.get(&quot;id&quot;);&#10;                                logger.debug(&quot;authenticate: examining document id={}&quot;, docId);&#10;                                Object headerObj = doc.get(&quot;Header&quot;);&#10;                                if (headerObj instanceof Map) {&#10;                                    @SuppressWarnings(&quot;unchecked&quot;)&#10;                                    Map&lt;String, Object&gt; header = (Map&lt;String, Object&gt;) headerObj;&#10;                                    Object userLwpObj = header.get(&quot;UserLWPId&quot;);&#10;                                    Object companyIdFound = header.get(&quot;CompanyId&quot;);&#10;                                    logger.debug(&quot;authenticate: document header CompanyId(doc)='{}', UserLWPId(doc)='{}'&quot;, companyIdFound, userLwpObj);&#10;                                    if (userLwpObj != null) {&#10;                                        lwpId = userLwpObj.toString();&#10;                                        logger.info(&quot;authenticate: found UserLWPId='{}' in Cosmos for employeeId='{}' (doc id={})&quot;, lwpId, employeeId, docId);&#10;                                        // set companyId attribute on Keycloak user if present&#10;                                        if (companyIdFound != null) {&#10;                                            try {&#10;                                                String compVal = companyIdFound.toString();&#10;                                                user.setAttribute(&quot;companyId&quot;, Collections.singletonList(compVal));&#10;                                                logger.info(&quot;authenticate: set user attribute companyId='{}' for user='{}'&quot;, compVal, username);&#10;                                            } catch (Exception e) {&#10;                                                logger.warn(&quot;authenticate: failed to set companyId attribute for user='{}'&quot;, username, e);&#10;                                            }&#10;                                        }&#10;                                        break;&#10;                                    } else {&#10;                                        logger.debug(&quot;authenticate: document id={} has no UserLWPId in Header&quot;, docId);&#10;                                    }&#10;                                } else {&#10;                                    logger.debug(&quot;authenticate: document id={} has no Header object (headerObj={})&quot;, docId, headerObj);&#10;                                }&#10;                            } else {&#10;                                logger.debug(&quot;authenticate: query returned non-map item: {}&quot;, it);&#10;                            }&#10;                        }&#10;                    } else {&#10;                        logger.debug(&quot;authenticate: query returned null iterable for employeeId='{}'&quot;, employeeId);&#10;                    }&#10;&#10;                    if (!anyDoc) {&#10;                        logger.info(&quot;authenticate: no documents returned for employeeId='{}' &quot;, employeeId);&#10;                    }&#10;                } catch (Exception e) {&#10;                    logger.warn(&quot;authenticate: error querying Cosmos for employeeId='{}'&quot;, employeeId, e);&#10;                    // ignore and fallback&#10;                    lwpId = null;&#10;                }&#10;            }&#10;        }&#10;&#10;        if (lwpId == null) {&#10;            //lwpId = dummyDb.getOrDefault(username, &quot;LWP-UNKNOWN&quot;);&#10;            logger.info(&quot;authenticate: using fallback LWP id='{}' for user='{}'&quot;, lwpId, username);&#10;        }&#10;&#10;        user.setAttribute(&quot;userLWPId&quot;, Collections.singletonList(lwpId));&#10;        logger.debug(&quot;authenticate: set user attribute userLWPId='{}' for user='{}'&quot;, lwpId, username);&#10;        logger.info(&quot;authenticate: final resolved lwpId='{}' for user='{}'&quot;, lwpId, username);&#10;&#10;        context.success();&#10;    }&#10;&#10;    private String findEmployeeId(AuthenticationFlowContext context, UserModel user) {&#10;        // Try common attribute names on the Keycloak user&#10;        String emp = user.getFirstAttribute(&quot;employeeId&quot;);&#10;        if (emp != null) {&#10;            logger.debug(&quot;findEmployeeId: found via user.getFirstAttribute('employeeId') =&gt; '{}'&quot;, emp);&#10;            return emp.trim();&#10;        }&#10;        emp = user.getFirstAttribute(&quot;EmployeeId&quot;);&#10;        if (emp != null) {&#10;            logger.debug(&quot;findEmployeeId: found via user.getFirstAttribute('EmployeeId') =&gt; '{}'&quot;, emp);&#10;            return emp.trim();&#10;        }&#10;&#10;        // Try authentication session notes (if the claim was preserved there)&#10;        try {&#10;            Object session = context.getAuthenticationSession();&#10;            if (session != null) {&#10;                logger.debug(&quot;findEmployeeId: checking authentication session notes via reflection&quot;);&#10;                try {&#10;                    java.lang.reflect.Method mClientNote = session.getClass().getMethod(&quot;getClientNote&quot;, String.class);&#10;                    Object val = mClientNote.invoke(session, &quot;employeeId&quot;);&#10;                    if (val instanceof String) {&#10;                        logger.debug(&quot;findEmployeeId: found via session.getClientNote('employeeId') =&gt; '{}'&quot;, val);&#10;                        return ((String) val).trim();&#10;                    }&#10;                } catch (NoSuchMethodException ignored) {&#10;                    logger.debug(&quot;findEmployeeId: session.getClientNote method not present&quot;);&#10;                }&#10;&#10;                try {&#10;                    java.lang.reflect.Method mClientNote2 = session.getClass().getMethod(&quot;getClientNote&quot;, String.class);&#10;                    Object val = mClientNote2.invoke(session, &quot;EmployeeId&quot;);&#10;                    if (val instanceof String) {&#10;                        logger.debug(&quot;findEmployeeId: found via session.getClientNote('EmployeeId') =&gt; '{}'&quot;, val);&#10;                        return ((String) val).trim();&#10;                    }&#10;                } catch (NoSuchMethodException ignored) {}&#10;&#10;                try {&#10;                    java.lang.reflect.Method mAuthNote = session.getClass().getMethod(&quot;getAuthNote&quot;, String.class);&#10;                    Object val = mAuthNote.invoke(session, &quot;employeeId&quot;);&#10;                    if (val instanceof String) {&#10;                        logger.debug(&quot;findEmployeeId: found via session.getAuthNote('employeeId') =&gt; '{}'&quot;, val);&#10;                        return ((String) val).trim();&#10;                    }&#10;                } catch (NoSuchMethodException ignored) {}&#10;&#10;                try {&#10;                    java.lang.reflect.Method mAuthNote2 = session.getClass().getMethod(&quot;getAuthNote&quot;, String.class);&#10;                    Object val = mAuthNote2.invoke(session, &quot;EmployeeId&quot;);&#10;                    if (val instanceof String) {&#10;                        logger.debug(&quot;findEmployeeId: found via session.getAuthNote('EmployeeId') =&gt; '{}'&quot;, val);&#10;                        return ((String) val).trim();&#10;                    }&#10;                } catch (NoSuchMethodException ignored) {}&#10;            } else {&#10;                logger.debug(&quot;findEmployeeId: authentication session is null&quot;);&#10;            }&#10;        } catch (Exception e) {&#10;            logger.debug(&quot;findEmployeeId: exception while inspecting authentication session&quot;, e);&#10;        }&#10;&#10;        // If still null, try realm/user attribute mapping for claim name &quot;employeeId&quot; (case-insensitive)&#10;        Map&lt;String, java.util.List&lt;String&gt;&gt; attrs = user.getAttributes();&#10;        if (attrs != null) {&#10;            for (Map.Entry&lt;String, java.util.List&lt;String&gt;&gt; e : attrs.entrySet()) {&#10;                if (e.getKey() != null &amp;&amp; e.getKey().equalsIgnoreCase(&quot;employeeId&quot;)) {&#10;                    java.util.List&lt;String&gt; vals = e.getValue();&#10;                    if (vals != null &amp;&amp; !vals.isEmpty()) {&#10;                        logger.debug(&quot;findEmployeeId: found via user.getAttributes() key='{}' =&gt; '{}'&quot;, e.getKey(), vals.get(0));&#10;                        return vals.get(0).trim();&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        logger.debug(&quot;findEmployeeId: employeeId not found in attributes or session&quot;);&#10;        return null;&#10;    }&#10;&#10;    @Override&#10;    public void action(AuthenticationFlowContext context) {&#10;&#10;    }&#10;&#10;    @Override&#10;    public boolean requiresUser() { return true; }&#10;&#10;    @Override&#10;    public boolean configuredFor(org.keycloak.models.KeycloakSession session, org.keycloak.models.RealmModel realm, UserModel user) { return true; }&#10;&#10;    @Override&#10;    public void setRequiredActions(org.keycloak.models.KeycloakSession session, org.keycloak.models.RealmModel realm, UserModel user) {&#10;&#10;    }&#10;&#10;    @Override&#10;    public void close() {&#10;        if (cosmosClient != null) {&#10;            try {&#10;                cosmosClient.close();&#10;            } catch (Exception ignored) {&#10;            }&#10;            cosmosClient = null;&#10;            cosmosContainer = null;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package cz.cid.lwp;&#10;&#10;import com.azure.cosmos.CosmosClient;&#10;import com.azure.cosmos.CosmosClientBuilder;&#10;import com.azure.cosmos.CosmosContainer;&#10;import com.azure.cosmos.CosmosDatabase;&#10;import com.azure.cosmos.models.CosmosQueryRequestOptions;&#10;import org.keycloak.authentication.AuthenticationFlowContext;&#10;import org.keycloak.authentication.Authenticator;&#10;import org.keycloak.models.UserModel;&#10;import org.slf4j.Logger;&#10;import org.slf4j.LoggerFactory;&#10;&#10;import java.util.Collections;&#10;import java.util.Map;&#10;&#10;public class LwpIdAuthenticator implements Authenticator {&#10;&#10;    private static final Logger logger = LoggerFactory.getLogger(LwpIdAuthenticator.class);&#10;&#10;    private static CosmosClient cosmosClient = null;&#10;    private static CosmosContainer cosmosContainer = null;&#10;&#10;    private static void initCosmos() {&#10;        logger.debug(&quot;initCosmos: checking COSMOS configuration&quot;);&#10;        if (cosmosClient != null &amp;&amp; cosmosContainer != null) return;&#10;&#10;        String endpoint = &quot;https://mobidriverdb.documents.azure.com:443/&quot;;&#10;        String key = &quot;6VWHXGXL0HkNU3M9mxTpDUbjvRB9WfeCzDRYvP9YCL8Mz5GEo37iDsPvotT26SMyGZ5CtknbvEMurju0n7SnyA==&quot;;&#10;        String dbName = &quot;MobiDriver&quot;;&#10;        String containerName = &quot;UserPKP&quot;;&#10;&#10;&#10;        try {&#10;            cosmosClient = new CosmosClientBuilder()&#10;                    .endpoint(endpoint)&#10;                    .key(key)&#10;                    .buildClient();&#10;&#10;            CosmosDatabase database = cosmosClient.getDatabase(dbName);&#10;            cosmosContainer = database.getContainer(containerName);&#10;            logger.info(&quot;initCosmos: initialized Cosmos container {} in database {}&quot;, containerName, dbName);&#10;        } catch (Exception e) {&#10;            logger.warn(&quot;initCosmos: failed to initialize Cosmos client/container&quot;, e);&#10;            // if something goes wrong, keep cosmosContainer null and fall back&#10;            cosmosContainer = null;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void authenticate(AuthenticationFlowContext context) {&#10;        UserModel user = context.getUser();&#10;&#10;        if (user == null) {&#10;            logger.warn(&quot;authenticate: user is null in context&quot;);&#10;            context.failure(org.keycloak.authentication.AuthenticationFlowError.UNKNOWN_USER);&#10;            return;&#10;        }&#10;&#10;        String username = user.getUsername();&#10;        logger.info(&quot;authenticate: start for username={}&quot;, username);&#10;&#10;        // Try to locate EmployeeId from user attributes or auth session&#10;        String employeeId = findEmployeeId(context, user);&#10;        // Try to locate CompanyId (string) from user attributes or auth session&#10;        logger.info(&quot;EMPLOYEE ID : {}&quot;, employeeId);&#10;&#10;&#10;        String lwpId = null;&#10;&#10;        if (employeeId == null) {&#10;            logger.warn(&quot;authenticate: no employeeId found for user='{}' - skipping Cosmos lookup&quot;, username);&#10;        } else {&#10;            initCosmos();&#10;            if (cosmosContainer == null) {&#10;                logger.warn(&quot;authenticate: cosmosContainer is null after init - will use fallback for user='{}'&quot;, username);&#10;            } else {&#10;                try {&#10;                    // Prepare EmployeeId for SQL: if non-numeric, quote and escape&#10;                    String queryEmployee = employeeId;&#10;                    if (!employeeId.matches(&quot;\\d+&quot;)) {&#10;                        String escapedEmp = employeeId.replace(&quot;'&quot;, &quot;''&quot;);&#10;                        queryEmployee = &quot;'&quot; + escapedEmp + &quot;'&quot;;&#10;                    }&#10;                    // Query only by EmployeeId (company filter removed)&#10;                    String query = String.format(&quot;SELECT * FROM c WHERE c.Item.EmployeeId = %s&quot;, queryEmployee);&#10;                    logger.info(&quot;authenticate: running Cosmos query: {}&quot;, query);&#10;                    Iterable&lt;?&gt; itemsObj = cosmosContainer.queryItems(query, new CosmosQueryRequestOptions(), Object.class);&#10;&#10;                    boolean anyDoc = false;&#10;                    if (itemsObj != null) {&#10;                        for (Object it : itemsObj) {&#10;                            anyDoc = true;&#10;                            if (it instanceof Map) {&#10;                                @SuppressWarnings(&quot;unchecked&quot;)&#10;                                Map&lt;String, Object&gt; doc = (Map&lt;String, Object&gt;) it;&#10;                                Object docId = doc.get(&quot;id&quot;);&#10;                                logger.debug(&quot;authenticate: examining document id={}&quot;, docId);&#10;                                Object headerObj = doc.get(&quot;Header&quot;);&#10;                                if (headerObj instanceof Map) {&#10;                                    @SuppressWarnings(&quot;unchecked&quot;)&#10;                                    Map&lt;String, Object&gt; header = (Map&lt;String, Object&gt;) headerObj;&#10;                                    Object userLwpObj = header.get(&quot;UserLWPId&quot;);&#10;                                    Object companyIdFound = header.get(&quot;CompanyId&quot;);&#10;                                    logger.debug(&quot;authenticate: document header CompanyId(doc)='{}', UserLWPId(doc)='{}'&quot;, companyIdFound, userLwpObj);&#10;                                    if (userLwpObj != null) {&#10;                                        lwpId = userLwpObj.toString();&#10;                                        logger.info(&quot;authenticate: found UserLWPId='{}' in Cosmos for employeeId='{}' (doc id={})&quot;, lwpId, employeeId, docId);&#10;                                        // set companyId attribute on Keycloak user if present&#10;                                        if (companyIdFound != null) {&#10;                                            try {&#10;                                                String compVal = companyIdFound.toString();&#10;                                                user.setAttribute(&quot;companyId&quot;, Collections.singletonList(compVal));&#10;                                                logger.info(&quot;authenticate: set user attribute companyId='{}' for user='{}'&quot;, compVal, username);&#10;                                            } catch (Exception e) {&#10;                                                logger.warn(&quot;authenticate: failed to set companyId attribute for user='{}'&quot;, username, e);&#10;                                            }&#10;                                        }&#10;                                        break;&#10;                                    } else {&#10;                                        logger.debug(&quot;authenticate: document id={} has no UserLWPId in Header&quot;, docId);&#10;                                    }&#10;                                } else {&#10;                                    logger.debug(&quot;authenticate: document id={} has no Header object (headerObj={})&quot;, docId, headerObj);&#10;                                }&#10;                            } else {&#10;                                logger.debug(&quot;authenticate: query returned non-map item: {}&quot;, it);&#10;                            }&#10;                        }&#10;                    } else {&#10;                        logger.debug(&quot;authenticate: query returned null iterable for employeeId='{}'&quot;, employeeId);&#10;                    }&#10;&#10;                    if (!anyDoc) {&#10;                        logger.info(&quot;authenticate: no documents returned for employeeId='{}' &quot;, employeeId);&#10;                    }&#10;                } catch (Exception e) {&#10;                    logger.warn(&quot;authenticate: error querying Cosmos for employeeId='{}'&quot;, employeeId, e);&#10;                    // ignore and fallback&#10;                    lwpId = null;&#10;                }&#10;            }&#10;        }&#10;&#10;        if (lwpId == null) {&#10;            //lwpId = dummyDb.getOrDefault(username, &quot;LWP-UNKNOWN&quot;);&#10;            logger.info(&quot;authenticate: using fallback LWP id='{}' for user='{}'&quot;, lwpId, username);&#10;        }&#10;&#10;        user.setAttribute(&quot;userLWPId&quot;, Collections.singletonList(lwpId));&#10;        logger.debug(&quot;authenticate: set user attribute userLWPId='{}' for user='{}'&quot;, lwpId, username);&#10;        logger.info(&quot;authenticate: final resolved lwpId='{}' for user='{}'&quot;, lwpId, username);&#10;&#10;        context.success();&#10;    }&#10;&#10;    private String findEmployeeId(AuthenticationFlowContext context, UserModel user) {&#10;        // Try common attribute names on the Keycloak user&#10;        String emp = user.getFirstAttribute(&quot;employeeId&quot;);&#10;        if (emp != null) {&#10;            logger.debug(&quot;findEmployeeId: found via user.getFirstAttribute('employeeId') =&gt; '{}'&quot;, emp);&#10;            return emp.trim();&#10;        }&#10;        emp = user.getFirstAttribute(&quot;EmployeeId&quot;);&#10;        if (emp != null) {&#10;            logger.debug(&quot;findEmployeeId: found via user.getFirstAttribute('EmployeeId') =&gt; '{}'&quot;, emp);&#10;            return emp.trim();&#10;        }&#10;&#10;        // Try authentication session notes (if the claim was preserved there)&#10;        try {&#10;            Object session = context.getAuthenticationSession();&#10;            if (session != null) {&#10;                logger.debug(&quot;findEmployeeId: checking authentication session notes via reflection&quot;);&#10;                try {&#10;                    java.lang.reflect.Method mClientNote = session.getClass().getMethod(&quot;getClientNote&quot;, String.class);&#10;                    Object val = mClientNote.invoke(session, &quot;employeeId&quot;);&#10;                    if (val instanceof String) {&#10;                        logger.debug(&quot;findEmployeeId: found via session.getClientNote('employeeId') =&gt; '{}'&quot;, val);&#10;                        return ((String) val).trim();&#10;                    }&#10;                } catch (NoSuchMethodException ignored) {&#10;                    logger.debug(&quot;findEmployeeId: session.getClientNote method not present&quot;);&#10;                }&#10;&#10;                try {&#10;                    java.lang.reflect.Method mClientNote2 = session.getClass().getMethod(&quot;getClientNote&quot;, String.class);&#10;                    Object val = mClientNote2.invoke(session, &quot;EmployeeId&quot;);&#10;                    if (val instanceof String) {&#10;                        logger.debug(&quot;findEmployeeId: found via session.getClientNote('EmployeeId') =&gt; '{}'&quot;, val);&#10;                        return ((String) val).trim();&#10;                    }&#10;                } catch (NoSuchMethodException ignored) {}&#10;&#10;                try {&#10;                    java.lang.reflect.Method mAuthNote = session.getClass().getMethod(&quot;getAuthNote&quot;, String.class);&#10;                    Object val = mAuthNote.invoke(session, &quot;employeeId&quot;);&#10;                    if (val instanceof String) {&#10;                        logger.debug(&quot;findEmployeeId: found via session.getAuthNote('employeeId') =&gt; '{}'&quot;, val);&#10;                        return ((String) val).trim();&#10;                    }&#10;                } catch (NoSuchMethodException ignored) {}&#10;&#10;                try {&#10;                    java.lang.reflect.Method mAuthNote2 = session.getClass().getMethod(&quot;getAuthNote&quot;, String.class);&#10;                    Object val = mAuthNote2.invoke(session, &quot;EmployeeId&quot;);&#10;                    if (val instanceof String) {&#10;                        logger.debug(&quot;findEmployeeId: found via session.getAuthNote('EmployeeId') =&gt; '{}'&quot;, val);&#10;                        return ((String) val).trim();&#10;                    }&#10;                } catch (NoSuchMethodException ignored) {}&#10;            } else {&#10;                logger.debug(&quot;findEmployeeId: authentication session is null&quot;);&#10;            }&#10;        } catch (Exception e) {&#10;            logger.debug(&quot;findEmployeeId: exception while inspecting authentication session&quot;, e);&#10;        }&#10;&#10;        // If still null, try realm/user attribute mapping for claim name &quot;employeeId&quot; (case-insensitive)&#10;        Map&lt;String, java.util.List&lt;String&gt;&gt; attrs = user.getAttributes();&#10;        if (attrs != null) {&#10;            for (Map.Entry&lt;String, java.util.List&lt;String&gt;&gt; e : attrs.entrySet()) {&#10;                if (e.getKey() != null &amp;&amp; e.getKey().equalsIgnoreCase(&quot;employeeId&quot;)) {&#10;                    java.util.List&lt;String&gt; vals = e.getValue();&#10;                    if (vals != null &amp;&amp; !vals.isEmpty()) {&#10;                        logger.debug(&quot;findEmployeeId: found via user.getAttributes() key='{}' =&gt; '{}'&quot;, e.getKey(), vals.get(0));&#10;                        return vals.get(0).trim();&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        logger.debug(&quot;findEmployeeId: employeeId not found in attributes or session&quot;);&#10;        return null;&#10;    }&#10;&#10;    @Override&#10;    public void action(AuthenticationFlowContext context) {&#10;&#10;    }&#10;&#10;    @Override&#10;    public boolean requiresUser() { return true; }&#10;&#10;    @Override&#10;    public boolean configuredFor(org.keycloak.models.KeycloakSession session, org.keycloak.models.RealmModel realm, UserModel user) { return true; }&#10;&#10;    @Override&#10;    public void setRequiredActions(org.keycloak.models.KeycloakSession session, org.keycloak.models.RealmModel realm, UserModel user) {&#10;&#10;    }&#10;&#10;    @Override&#10;    public void close() {&#10;        if (cosmosClient != null) {&#10;            try {&#10;                cosmosClient.close();&#10;            } catch (Exception ignored) {&#10;            }&#10;            cosmosClient = null;&#10;            cosmosContainer = null;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>