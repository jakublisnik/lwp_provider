<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/cz/cid/lwp/LwpIdAuthenticator.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/cz/cid/lwp/LwpIdAuthenticator.java" />
              <option name="originalContent" value="package cz.cid.lwp;&#10;&#10;import org.keycloak.authentication.AuthenticationFlowContext;&#10;import org.keycloak.authentication.Authenticator;&#10;import org.keycloak.models.UserModel;&#10;&#10;import java.util.Collections;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;&#10;public class LwpIdAuthenticator implements Authenticator {&#10;&#10;    // Dummy „databáze“ username → LwpID&#10;    private static final Map&lt;String, String&gt; dummyDb = new HashMap&lt;&gt;();&#10;&#10;    static {&#10;        dummyDb.put(&quot;jlisnik@svelkyemail.onmicrosoft.com&quot;, &quot;5686&quot;);&#10;        dummyDb.put(&quot;jplandor@svelkyemail.onmicrosoft.com&quot;, &quot;4578&quot;);&#10;        dummyDb.put(&quot;ext_test@awt.eu&quot;, &quot;1234&quot;);&#10;&#10;    }&#10;&#10;    @Override&#10;    public void authenticate(AuthenticationFlowContext context) {&#10;        UserModel user = context.getUser();&#10;&#10;        if (user == null) {&#10;            context.failure(org.keycloak.authentication.AuthenticationFlowError.UNKNOWN_USER);&#10;            return;&#10;        }&#10;&#10;        String username = user.getUsername();&#10;&#10;        String lwpId = dummyDb.getOrDefault(username, &quot;LWP-UNKNOWN&quot;);&#10;&#10;        user.setAttribute(&quot;userLWPId&quot;, Collections.singletonList(lwpId));&#10;&#10;        context.success();&#10;    }&#10;&#10;    @Override&#10;    public void action(AuthenticationFlowContext context) {&#10;&#10;    }&#10;&#10;    @Override&#10;    public boolean requiresUser() { return false; }&#10;&#10;    @Override&#10;    public boolean configuredFor(org.keycloak.models.KeycloakSession session, org.keycloak.models.RealmModel realm, UserModel user) { return true; }&#10;&#10;    @Override&#10;    public void setRequiredActions(org.keycloak.models.KeycloakSession session, org.keycloak.models.RealmModel realm, UserModel user) {&#10;&#10;    }&#10;&#10;    @Override&#10;    public void close() {&#10;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package cz.cid.lwp;&#10;&#10;import org.keycloak.authentication.AuthenticationFlowContext;&#10;import org.keycloak.authentication.Authenticator;&#10;import org.keycloak.models.UserModel;&#10;&#10;import java.util.Collections;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;&#10;public class LwpIdAuthenticator implements Authenticator {&#10;&#10;    // Dummy „databáze“ username → LwpID&#10;    private static final Map&lt;String, String&gt; dummyDb = new HashMap&lt;&gt;();&#10;&#10;    static {&#10;        dummyDb.put(&quot;jlisnik@svelkyemail.onmicrosoft.com&quot;, &quot;5686&quot;);&#10;        dummyDb.put(&quot;jplandor@svelkyemail.onmicrosoft.com&quot;, &quot;4578&quot;);&#10;        dummyDb.put(&quot;ext_test@awt.eu&quot;, &quot;1234&quot;);&#10;&#10;    }&#10;&#10;    @Override&#10;    public void authenticate(AuthenticationFlowContext context) {&#10;        UserModel user = context.getUser();&#10;&#10;        if (user == null) {&#10;            context.failure(org.keycloak.authentication.AuthenticationFlowError.UNKNOWN_USER);&#10;            return;&#10;        }&#10;&#10;        String username = user.getUsername();&#10;&#10;        String lwpId = dummyDb.getOrDefault(username, &quot;LWP-UNKNOWN&quot;);&#10;&#10;        user.setAttribute(&quot;userLWPId&quot;, Collections.singletonList(lwpId));&#10;&#10;        context.success();&#10;    }&#10;&#10;    @Override&#10;    public void action(AuthenticationFlowContext context) {&#10;&#10;    }&#10;&#10;    @Override&#10;    public boolean requiresUser() { return true; }&#10;&#10;    @Override&#10;    public boolean configuredFor(org.keycloak.models.KeycloakSession session, org.keycloak.models.RealmModel realm, UserModel user) { return true; }&#10;&#10;    @Override&#10;    public void setRequiredActions(org.keycloak.models.KeycloakSession session, org.keycloak.models.RealmModel realm, UserModel user) {&#10;&#10;    }&#10;&#10;    @Override&#10;    public void close() {&#10;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/cz/cid/lwp/LwpIdAuthenticatorFactory.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/cz/cid/lwp/LwpIdAuthenticatorFactory.java" />
              <option name="originalContent" value="package cz.cid.lwp;&#10;&#10;import org.keycloak.Config;&#10;import org.keycloak.authentication.Authenticator;&#10;import org.keycloak.authentication.AuthenticatorFactory;&#10;import org.keycloak.models.AuthenticationExecutionModel;&#10;import org.keycloak.models.KeycloakSession;&#10;import org.keycloak.models.KeycloakSessionFactory;&#10;import org.keycloak.provider.ProviderConfigProperty;&#10;&#10;import java.util.List;&#10;&#10;public class LwpIdAuthenticatorFactory implements AuthenticatorFactory {&#10;&#10;    public static final String PROVIDER_ID = &quot;dummy-lwpid-authenticator&quot;;&#10;&#10;&#10;    @Override&#10;    public String getId() {&#10;        return &quot;dummy-lwpid-authenticator&quot;;&#10;    }&#10;&#10;    @Override&#10;    public Authenticator create(KeycloakSession session) {&#10;        return new LwpIdAuthenticator();&#10;    }&#10;&#10;    @Override&#10;    public void init(Config.Scope scope) {&#10;&#10;    }&#10;&#10;    @Override&#10;    public void postInit(KeycloakSessionFactory keycloakSessionFactory) {&#10;&#10;    }&#10;&#10;    @Override&#10;    public void close() {&#10;&#10;    }&#10;&#10;    @Override&#10;    public String getDisplayType() {&#10;        return &quot;LwpID Authenticator&quot;;&#10;    }&#10;&#10;    @Override&#10;    public String getReferenceCategory() {&#10;        return &quot;&quot;;&#10;    }&#10;&#10;    @Override&#10;    public boolean isConfigurable() {&#10;        return true;&#10;    }&#10;&#10;    @Override&#10;    public AuthenticationExecutionModel.Requirement[] getRequirementChoices() {&#10;        return new AuthenticationExecutionModel.Requirement[] {&#10;                AuthenticationExecutionModel.Requirement.REQUIRED,&#10;                AuthenticationExecutionModel.Requirement.ALTERNATIVE,&#10;                AuthenticationExecutionModel.Requirement.DISABLED,&#10;                AuthenticationExecutionModel.Requirement.CONDITIONAL,&#10;        };&#10;    }&#10;&#10;    @Override&#10;    public boolean isUserSetupAllowed() {&#10;        return true;&#10;    }&#10;&#10;    @Override&#10;    public String getHelpText() {&#10;        return &quot;Authenticator that injects dummy LwpID attribute&quot;;&#10;    }&#10;&#10;    @Override&#10;    public List&lt;ProviderConfigProperty&gt; getConfigProperties() {&#10;        return List.of();&#10;    }&#10;&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package cz.cid.lwp;&#10;&#10;import org.keycloak.Config;&#10;import org.keycloak.authentication.Authenticator;&#10;import org.keycloak.authentication.AuthenticatorFactory;&#10;import org.keycloak.models.AuthenticationExecutionModel;&#10;import org.keycloak.models.KeycloakSession;&#10;import org.keycloak.models.KeycloakSessionFactory;&#10;import org.keycloak.provider.ProviderConfigProperty;&#10;&#10;import java.util.List;&#10;&#10;public class LwpIdAuthenticatorFactory implements AuthenticatorFactory {&#10;&#10;    public static final String PROVIDER_ID = &quot;dummy-lwpid-authenticator&quot;;&#10;&#10;&#10;    @Override&#10;    public String getId() {&#10;        return PROVIDER_ID;&#10;    }&#10;&#10;    @Override&#10;    public Authenticator create(KeycloakSession session) {&#10;        return new LwpIdAuthenticator();&#10;    }&#10;&#10;    @Override&#10;    public void init(Config.Scope scope) {&#10;&#10;    }&#10;&#10;    @Override&#10;    public void postInit(KeycloakSessionFactory keycloakSessionFactory) {&#10;&#10;    }&#10;&#10;    @Override&#10;    public void close() {&#10;&#10;    }&#10;&#10;    @Override&#10;    public String getDisplayType() {&#10;        return &quot;LwpID Authenticator&quot;;&#10;    }&#10;&#10;    @Override&#10;    public String getReferenceCategory() {&#10;        return &quot;&quot;;&#10;    }&#10;&#10;    @Override&#10;    public boolean isConfigurable() {&#10;        return true;&#10;    }&#10;&#10;    @Override&#10;    public AuthenticationExecutionModel.Requirement[] getRequirementChoices() {&#10;        return new AuthenticationExecutionModel.Requirement[] {&#10;                AuthenticationExecutionModel.Requirement.REQUIRED,&#10;                AuthenticationExecutionModel.Requirement.ALTERNATIVE,&#10;                AuthenticationExecutionModel.Requirement.DISABLED,&#10;                AuthenticationExecutionModel.Requirement.CONDITIONAL,&#10;        };&#10;    }&#10;&#10;    @Override&#10;    public boolean isUserSetupAllowed() {&#10;        return true;&#10;    }&#10;&#10;    @Override&#10;    public String getHelpText() {&#10;        return &quot;Authenticator that injects dummy LwpID attribute&quot;;&#10;    }&#10;&#10;    @Override&#10;    public List&lt;ProviderConfigProperty&gt; getConfigProperties() {&#10;        return List.of();&#10;    }&#10;&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>